/** @jsx h */
/// <reference path="../src/lib/jsx.d.ts" />
import {
  array,
  boolean,
  defineComponent,
  h,
  number,
  renderComponent,
  string,
} from "../src/index.ts";
import {
  publishState,
  subscribeToState,
  getState,
  createCartAction,
  debugReactiveState,
} from "../src/lib/reactive-helpers.ts";

// Product Data
const sampleProducts = [
  { id: "1", name: "Cool T-Shirt", price: 25.99, image: "👕" },
  { id: "2", name: "Awesome Hoodie", price: 49.99, image: "🧥" },
  { id: "3", name: "Nice Sneakers", price: 89.99, image: "👟" },
  { id: "4", name: "Stylish Hat", price: 19.99, image: "🧢" },
  { id: "5", name: "Cool Sunglasses", price: 34.99, image: "🕶️" },
  { id: "6", name: "Smart Watch", price: 199.99, image: "⌚" },
];

// Main Shopping Cart Component - Manages the cart state
defineComponent("shopping-cart", {
  // stateSubscriptions: {
    cart: `
      // Update the cart display when state changes
      const cartContainer = this.querySelector('.cart-items');
      const totalElement = this.querySelector('.total-amount');
      const emptyMessage = this.querySelector('.empty-message');
      
      if (data.isEmpty) {
        cartContainer.style.display = 'none';
        emptyMessage.style.display = 'block';
        totalElement.textContent = '$0.00';
      } else {
        cartContainer.style.display = 'block';
        emptyMessage.style.display = 'none';
        totalElement.textContent = '$' + data.total.toFixed(2);
        
        // Re-render cart items
        cartContainer.innerHTML = data.items.map(item => 
          '<div class="cart-item">' +
            '<span class="item-icon">' + (item.image || '📦') + '</span>' +
            '<div class="item-details">' +
              '<div class="item-name">' + item.name + '</div>' +
              '<div class="item-price">$' + item.price.toFixed(2) + ' × ' + item.quantity + '</div>' +
            '</div>' +
            '<div class="item-actions">' +
              '<button class="qty-btn" onclick="' + 
                "const currentCart = window.funcwcState.getState('cart') || { items: [] };" +
                "const newItems = [...currentCart.items];" +
                "const index = newItems.findIndex(i => i.id === '" + item.id + "');" +
                "if (index >= 0 && newItems[index].quantity > 1) {" +
                  "newItems[index] = {...newItems[index], quantity: newItems[index].quantity - 1};" +
                "} else if (index >= 0) {" +
                  "newItems.splice(index, 1);" +
                "}" +
                "const cartState = { items: newItems, count: newItems.length, total: newItems.reduce((s,i) => s + (i.price * i.quantity), 0), isEmpty: newItems.length === 0 };" +
                "window.funcwcState.publish('cart', cartState);" +
              '">-</button>' +
              '<span class="quantity">' + item.quantity + '</span>' +
              '<button class="qty-btn" onclick="' + 
                "const currentCart = window.funcwcState.getState('cart') || { items: [] };" +
                "const newItems = [...currentCart.items];" +
                "const index = newItems.findIndex(i => i.id === '" + item.id + "');" +
                "if (index >= 0) newItems[index] = {...newItems[index], quantity: newItems[index].quantity + 1};" +
                "const cartState = { items: newItems, count: newItems.length, total: newItems.reduce((s,i) => s + (i.price * i.quantity), 0), isEmpty: newItems.length === 0 };" +
                "window.funcwcState.publish('cart', cartState);" +
              '">+</button>' +
              '<button class="remove-btn" onclick="' + 
                "const currentCart = window.funcwcState.getState('cart') || { items: [] };" +
                "const newItems = currentCart.items.filter(i => i.id !== '" + item.id + "');" +
                "const cartState = { items: newItems, count: newItems.length, total: newItems.reduce((s,i) => s + (i.price * i.quantity), 0), isEmpty: newItems.length === 0 };" +
                "window.funcwcState.publish('cart', cartState);" +
              '">🗑️</button>' +
            '</div>' +
          '</div>'
        ).join('');
      }
      
      // Update item count badge
      const countBadge = this.querySelector('.item-count');
      countBadge.textContent = data.count.toString();
      countBadge.style.display = data.count > 0 ? 'block' : 'none';
    `
  },
  // onMount: `
    // Initialize empty cart state on mount
    const initialCart = {
      items: [],
      count: 0,
      total: 0,
      isEmpty: true
    };
    window.funcwcState.publish('cart', initialCart);
  `,
  styles: {
    cart: `{
      background: var(--theme-card-bg, white);
      border: 2px solid var(--theme-border, #ddd);
      border-radius: 12px;
      padding: 1.5rem;
      margin: 1rem 0;
      transition: all 0.3s ease;
      min-height: 300px;
    }`,
    header: `{
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 1rem;
      padding-bottom: 0.5rem;
      border-bottom: 2px solid var(--theme-border, #ddd);
    }`,
    title: `{
      color: var(--theme-text, #333);
      font-size: 1.5rem;
      font-weight: bold;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }`,
    itemCount: `{
      background: var(--theme-button-bg, #007bff);
      color: var(--theme-button-text, white);
      border-radius: 50%;
      width: 24px;
      height: 24px;
      display: none;
      align-items: center;
      justify-content: center;
      font-size: 0.8rem;
      font-weight: bold;
    }`,
    clearButton: `{
      background: #dc3545;
      color: white;
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 6px;
      cursor: pointer;
      font-size: 0.9rem;
      transition: all 0.2s ease;
    }`,
    emptyMessage: `{
      text-align: center;
      color: var(--theme-text, #666);
      padding: 2rem;
      font-style: italic;
    }`,
    cartItems: `{
      display: none;
    }`,
    cartItem: `{
      display: flex;
      align-items: center;
      gap: 1rem;
      padding: 1rem;
      border: 1px solid var(--theme-border, #eee);
      border-radius: 8px;
      margin-bottom: 0.5rem;
      background: var(--theme-bg, #f9f9f9);
      transition: all 0.2s ease;
    }`,
    itemIcon: `{
      font-size: 2rem;
      display: flex;
      align-items: center;
      justify-content: center;
      width: 60px;
      height: 60px;
      background: var(--theme-card-bg, white);
      border-radius: 8px;
    }`,
    itemDetails: `{
      flex: 1;
    }`,
    itemName: `{
      color: var(--theme-text, #333);
      font-weight: bold;
      font-size: 1.1rem;
    }`,
    itemPrice: `{
      color: var(--theme-text, #666);
      font-size: 0.9rem;
      margin-top: 0.25rem;
    }`,
    itemActions: `{
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }`,
    qtyBtn: `{
      background: var(--theme-button-bg, #007bff);
      color: var(--theme-button-text, white);
      border: none;
      width: 30px;
      height: 30px;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: bold;
      transition: all 0.2s ease;
    }`,
    quantity: `{
      font-weight: bold;
      color: var(--theme-text, #333);
      min-width: 30px;
      text-align: center;
    }`,
    removeBtn: `{
      background: #dc3545;
      color: white;
      border: none;
      width: 30px;
      height: 30px;
      border-radius: 50%;
      cursor: pointer;
      display: flex;
      align-items: center;
      justify-content: center;
      margin-left: 0.5rem;
      transition: all 0.2s ease;
    }`,
    footer: `{
      border-top: 2px solid var(--theme-border, #ddd);
      padding-top: 1rem;
      margin-top: 1rem;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }`,
    total: `{
      font-size: 1.5rem;
      font-weight: bold;
      color: var(--theme-text, #333);
    }`,
    totalAmount: `{
      color: var(--theme-button-bg, #007bff);
    }`
  },
  render: () => (
    <div class="cart">
      <div class="header">
        <div class="title">
          🛒 Shopping Cart
          <span class="item-count">0</span>
        </div>
        <button 
          class="clear-button"
          hx-on:click={publishState("cart", { items: [], count: 0, total: 0, isEmpty: true })}
        >
          Clear Cart
        </button>
      </div>
      
      <div class="empty-message">
        <p>🛒 Your cart is empty</p>
        <p>Add some products to get started!</p>
      </div>
      
      <div class="cart-items">
        {/* Items will be populated by state subscription */}
      </div>
      
      <div class="footer">
        <div class="total">
          Total: <span class="total-amount">$0.00</span>
        </div>
        <button 
          class="clear-button"
          style="background: #28a745;"
          hx-on:click={debugReactiveState("Shopping Cart", false, true)}
        >
          🐛 Debug State
        </button>
      </div>
    </div>
  )
});

// Cart Badge - Shows cart summary in header/nav
defineComponent("cart-badge", {
  // stateSubscriptions: {
    cart: `
      const countEl = this.querySelector('.count');
      const totalEl = this.querySelector('.total');
      
      countEl.textContent = data.count.toString();
      totalEl.textContent = '$' + data.total.toFixed(2);
      
      // Visual feedback
      this.classList.toggle('empty', data.isEmpty);
      this.classList.toggle('has-items', !data.isEmpty);
      
      // Animate on changes
      if (data.count > 0) {
        this.style.transform = 'scale(1.1)';
        setTimeout(() => this.style.transform = 'scale(1)', 200);
      }
    `
  },
  styles: {
    badge: `{
      display: inline-flex;
      align-items: center;
      gap: 0.5rem;
      background: var(--theme-button-bg, #007bff);
      color: var(--theme-button-text, white);
      padding: 0.75rem 1rem;
      border-radius: 25px;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      border: 2px solid transparent;
    }`,
    empty: `{
      opacity: 0.6;
      background: var(--theme-border, #ccc);
    }`,
    hasItems: `{
      border-color: var(--theme-button-text, white);
      box-shadow: 0 4px 12px rgba(0, 123, 255, 0.3);
    }`,
    icon: `{
      font-size: 1.2rem;
    }`,
    text: `{
      font-size: 1rem;
    }`,
    count: `{
      background: var(--theme-button-text, white);
      color: var(--theme-button-bg, #007bff);
      border-radius: 50%;
      width: 24px;
      height: 24px;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 0.8rem;
      font-weight: bold;
      margin-left: 0.5rem;
    }`,
    total: `{
      font-size: 0.9rem;
      opacity: 0.9;
    }`
  },
  render: ({ initialCount = number(0), initialTotal = number(0) }) => (
    <div class="badge empty">
      <span class="icon">🛒</span>
      <span class="text">Cart</span>
      <span class="count">{initialCount}</span>
      <span class="total">${Number(initialTotal).toFixed(2)}</span>
    </div>
  )
});

// Checkout Button - Enables/disables based on cart state
defineComponent("checkout-button", {
  // stateSubscriptions: {
    cart: `
      const isEmpty = data.isEmpty;
      const count = data.count;
      
      this.disabled = isEmpty;
      this.classList.toggle('disabled', isEmpty);
      this.classList.toggle('ready', !isEmpty);
      
      if (isEmpty) {
        this.textContent = 'Add items to checkout';
      } else {
        this.textContent = 'Checkout (' + count + ' item' + (count !== 1 ? 's' : '') + ')';
      }
    `
  },
  styles: {
    button: `{
      background: #28a745;
      color: white;
      border: none;
      padding: 1rem 2rem;
      border-radius: 8px;
      font-size: 1.1rem;
      font-weight: bold;
      cursor: pointer;
      transition: all 0.3s ease;
      width: 100%;
      margin: 1rem 0;
    }`,
    disabled: `{
      background: #6c757d;
      cursor: not-allowed;
      opacity: 0.6;
    }`,
    ready: `{
      background: #28a745;
      cursor: pointer;
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
    }`
  },
  render: ({ enabled = boolean(false) }) => (
    <button 
      class={`button ${!enabled ? 'disabled' : 'ready'}`}
      disabled={!enabled}
      hx-on:click={`
        const cartData = window.funcwcState.getState('cart');
        if (!cartData || cartData.isEmpty) return;
        
        alert('🎉 Checkout successful!\\n\\n' + 
              'Items: ' + cartData.count + '\\n' +
              'Total: $' + cartData.total.toFixed(2) + '\\n\\n' +
              'Thank you for your purchase!');
        
        // Clear cart after checkout
        window.funcwcState.publish('cart', { items: [], count: 0, total: 0, isEmpty: true });
      `}
    >
      {enabled ? 'Checkout' : 'Add items to checkout'}
    </button>
  )
});

// Product Grid - Display products that can be added to cart
defineComponent("product-grid", {
  styles: {
    grid: `{
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
      gap: 1.5rem;
      margin: 1.5rem 0;
      padding: 1rem;
      background: var(--theme-bg, white);
      border-radius: 12px;
      border: 2px solid var(--theme-border, #ddd);
    }`,
    title: `{
      grid-column: 1 / -1;
      color: var(--theme-text, #333);
      font-size: 1.5rem;
      font-weight: bold;
      text-align: center;
      margin-bottom: 1rem;
    }`,
    product: `{
      background: var(--theme-card-bg, #f8f9fa);
      border: 2px solid var(--theme-border, #ddd);
      border-radius: 12px;
      padding: 1.5rem;
      text-align: center;
      transition: all 0.3s ease;
      display: flex;
      flex-direction: column;
      gap: 1rem;
    }`,
    productHover: `{
      transform: translateY(-4px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
      border-color: var(--theme-button-bg, #007bff);
    }`,
    productImage: `{
      font-size: 4rem;
      margin-bottom: 0.5rem;
    }`,
    productName: `{
      color: var(--theme-text, #333);
      font-size: 1.2rem;
      font-weight: bold;
      margin-bottom: 0.5rem;
    }`,
    productPrice: `{
      color: var(--theme-button-bg, #007bff);
      font-size: 1.4rem;
      font-weight: bold;
      margin-bottom: 1rem;
    }`,
    addButton: `{
      background: var(--theme-button-bg, #007bff);
      color: var(--theme-button-text, white);
      border: none;
      padding: 0.75rem 1.5rem;
      border-radius: 8px;
      cursor: pointer;
      font-weight: bold;
      font-size: 1rem;
      transition: all 0.2s ease;
      margin-top: auto;
    }`,
    addButtonHover: `{
      background: var(--theme-button-bg, #0056b3);
      transform: translateY(-2px);
    }`,
    addButtonSuccess: `{
      background: #28a745;
      transform: scale(0.95);
    }`
  },
  render: ({ products = array(sampleProducts) }) => (
    <div class="grid">
      <h2 class="title">🏪 Product Catalog</h2>
      {(products as unknown as any[]).map(product => (
        <div class="product" key={product.id}>
          <div class="product-image">{product.image}</div>
          <div class="product-name">{product.name}</div>
          <div class="product-price">${product.price.toFixed(2)}</div>
          <button 
            class="add-button"
            hx-on:click={createCartAction("add", JSON.stringify({
              id: product.id,
              name: product.name,
              price: product.price,
              image: product.image,
              quantity: 1
            }))}
            hx-on:mouseover="this.classList.add('add-button-hover')"
            hx-on:mouseout="this.classList.remove('add-button-hover')"
          >
            Add to Cart
          </button>
        </div>
      ))}
    </div>
  )
});

// Cart Statistics - Shows detailed cart analytics
defineComponent("cart-statistics", {
  // stateSubscriptions: {
    cart: `
      const stats = this.querySelector('.stats-content');
      const isEmpty = data.isEmpty;
      
      if (isEmpty) {
        stats.innerHTML = '<div class="stat-empty">No items in cart</div>';
      } else {
        const avgPrice = data.total / data.count;
        const mostExpensive = data.items.reduce((max, item) => 
          item.price > max.price ? item : max, data.items[0]);
        const totalQuantity = data.items.reduce((sum, item) => sum + item.quantity, 0);
        
        stats.innerHTML = 
          '<div class="stat-item"><strong>Items:</strong> ' + data.count + '</div>' +
          '<div class="stat-item"><strong>Total Quantity:</strong> ' + totalQuantity + '</div>' +
          '<div class="stat-item"><strong>Average Price:</strong> $' + avgPrice.toFixed(2) + '</div>' +
          '<div class="stat-item"><strong>Most Expensive:</strong> ' + mostExpensive.name + ' ($' + mostExpensive.price.toFixed(2) + ')</div>' +
          '<div class="stat-item"><strong>Total Value:</strong> $' + data.total.toFixed(2) + '</div>';
      }
    `
  },
  styles: {
    stats: `{
      background: var(--theme-card-bg, #f8f9fa);
      border: 2px solid var(--theme-border, #ddd);
      border-radius: 8px;
      padding: 1rem;
      margin: 1rem 0;
    }`,
    title: `{
      color: var(--theme-text, #333);
      font-weight: bold;
      margin-bottom: 0.5rem;
      display: flex;
      align-items: center;
      gap: 0.5rem;
    }`,
    statsContent: `{
      display: flex;
      flex-direction: column;
      gap: 0.25rem;
    }`,
    statItem: `{
      color: var(--theme-text, #333);
      font-size: 0.9rem;
      padding: 0.25rem 0;
      border-bottom: 1px solid var(--theme-border, #eee);
    }`,
    statEmpty: `{
      color: var(--theme-text, #666);
      font-style: italic;
      text-align: center;
      padding: 1rem;
    }`
  },
  render: () => (
    <div class="stats">
      <div class="title">📊 Cart Statistics</div>
      <div class="stats-content">
        <div class="stat-empty">No items in cart</div>
      </div>
    </div>
  )
});

// Quick Add Panel - Fast way to add multiple items
defineComponent("quick-add-panel", {
  styles: {
    panel: `{
      background: var(--theme-card-bg, #f8f9fa);
      border: 2px dashed var(--theme-border, #ddd);
      border-radius: 8px;
      padding: 1rem;
      margin: 1rem 0;
      text-align: center;
    }`,
    title: `{
      color: var(--theme-text, #333);
      font-weight: bold;
      margin-bottom: 1rem;
    }`,
    buttons: `{
      display: flex;
      gap: 0.5rem;
      flex-wrap: wrap;
      justify-content: center;
    }`,
    quickButton: `{
      background: var(--theme-button-bg, #007bff);
      color: var(--theme-button-text, white);
      border: none;
      padding: 0.5rem 1rem;
      border-radius: 20px;
      cursor: pointer;
      font-size: 0.9rem;
      transition: all 0.2s ease;
    }`,
    quickButtonHover: `{
      transform: translateY(-2px);
      box-shadow: 0 4px 8px rgba(0, 123, 255, 0.3);
    }`
  },
  render: () => (
    <div class="panel">
      <div class="title">⚡ Quick Add</div>
      <div class="buttons">
        <button 
          class="quick-button"
          hx-on:click={createCartAction("add", JSON.stringify({
            id: "quick-1", name: "Random Item", price: Math.floor(Math.random() * 50) + 10,
            image: "🎁", quantity: 1
          }))}
        >
          🎁 Random Item
        </button>
        <button 
          class="quick-button"
          hx-on:click={`
            // Add multiple random items
            const items = ['🎮 Gaming Mouse', '⌨️ Keyboard', '🖥️ Monitor', '🎧 Headset', '📱 Phone Case'];
            const randomItem = items[Math.floor(Math.random() * items.length)];
            const emoji = randomItem.split(' ')[0];
            const name = randomItem.substring(2);
            
            ${createCartAction("add", `{
              id: "bulk-" + Date.now(), 
              name: name, 
              price: Math.floor(Math.random() * 100) + 20,
              image: emoji, 
              quantity: Math.floor(Math.random() * 3) + 1
            }`)}
          `}
        >
          🛍️ Bulk Add
        </button>
        <button 
          class="quick-button"
          style="background: #28a745;"
          hx-on:click={`
            // Add a discounted bundle
            ${createCartAction("add", JSON.stringify({
              id: "bundle-" + Date.now(), 
              name: "Special Bundle", 
              price: 99.99,
              image: "📦", 
              quantity: 1
            }))}
          `}
        >
          📦 Bundle Deal
        </button>
      </div>
    </div>
  )
});

console.log("✅ Shopping Cart System components registered");