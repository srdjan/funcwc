/** @jsx h */
import { boolean, defineComponent, h, string } from "../../index.ts";

/**
 * üé® CSS-Only Format Showcase
 * 
 * Demonstrates the revolutionary CSS-only styling system:
 * - Write pure CSS properties, get auto-generated class names
 * - Component-scoped styles with Shadow DOM-like isolation
 * - Zero CSS-in-JS runtime overhead
 * - Automatic style deduplication and optimization
 */
defineComponent("showcase-css-format", {
  styles: {
    showcase: `{
      background: var(--gray-0);
      border-radius: var(--radius-4);
      padding: var(--size-6);
      margin: var(--size-6) 0;
    }`,

    showcaseTitle: `{
      font-size: var(--font-size-4);
      font-weight: var(--font-weight-7);
      color: var(--purple-6);
      margin-bottom: var(--size-4);
    }`,

    showcaseSubtitle: `{
      font-size: var(--font-size-1);
      color: var(--gray-7);
      margin-bottom: var(--size-6);
    }`,

    comparisonGrid: `{
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: var(--size-6);
      margin-bottom: var(--size-6);
    }`,

    codeBlock: `{
      background: var(--gray-9);
      color: var(--gray-1);
      padding: var(--size-4);
      border-radius: var(--radius-3);
      font-family: var(--font-mono);
      font-size: var(--font-size-0);
      line-height: 1.5;
      overflow-x: auto;
      position: relative;
    }`,

    codeTitle: `{
      background: var(--purple-6);
      color: white;
      padding: var(--size-2) var(--size-3);
      font-size: var(--font-size-0);
      font-weight: var(--font-weight-6);
      margin: calc(-1 * var(--size-4)) calc(-1 * var(--size-4)) var(--size-3) calc(-1 * var(--size-4));
      border-radius: var(--radius-3) var(--radius-3) 0 0;
    }`,

    liveDemo: `{
      background: white;
      border: 2px solid var(--purple-3);
      border-radius: var(--radius-4);
      padding: var(--size-6);
      margin: var(--size-4) 0;
    }`,

    liveDemoTitle: `{
      font-size: var(--font-size-3);
      font-weight: var(--font-weight-6);
      color: var(--purple-7);
      margin-bottom: var(--size-4);
      text-align: center;
    }`,

    processFlow: `{
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
      gap: var(--size-4);
      margin: var(--size-6) 0;
    }`,

    processStep: `{
      background: white;
      border: 2px solid var(--purple-3);
      border-radius: var(--radius-3);
      padding: var(--size-4);
      text-align: center;
      position: relative;
    }`,

    processNumber: `{
      background: var(--purple-6);
      color: white;
      border-radius: 50%;
      width: var(--size-6);
      height: var(--size-6);
      display: flex;
      align-items: center;
      justify-content: center;
      font-weight: var(--font-weight-7);
      margin: 0 auto var(--size-3) auto;
    }`,

    processTitle: `{
      font-size: var(--font-size-1);
      font-weight: var(--font-weight-6);
      color: var(--purple-7);
      margin-bottom: var(--size-2);
    }`,

    processDescription: `{
      font-size: var(--font-size-0);
      color: var(--gray-6);
      line-height: 1.4;
    }`,

    benefitsList: `{
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
      gap: var(--size-4);
      margin: var(--size-6) 0;
    }`,

    benefitCard: `{
      background: linear-gradient(135deg, var(--purple-1) 0%, var(--pink-1) 100%);
      border: 1px solid var(--purple-3);
      border-radius: var(--radius-3);
      padding: var(--size-4);
      transition: all 0.3s ease;
    }`,

    benefitIcon: `{
      font-size: var(--font-size-3);
      color: var(--purple-6);
      margin-bottom: var(--size-2);
    }`,

    benefitTitle: `{
      font-size: var(--font-size-2);
      font-weight: var(--font-weight-6);
      color: var(--purple-8);
      margin-bottom: var(--size-2);
    }`,

    benefitDescription: `{
      font-size: var(--font-size-1);
      color: var(--purple-7);
      line-height: 1.5;
    }`,
  },

  render: (props, _api, classes) => {
    const title = "CSS-Only Format Revolution";
    const showComparison = true;
    const showProcess = true;
    return (
    <div class={classes!.showcase} id="css-format">
      <h2 class={classes!.showcaseTitle}>{title}</h2>
      <p class={classes!.showcaseSubtitle}>
        Write pure CSS properties and get auto-generated, scoped class names. Zero CSS-in-JS runtime overhead.
      </p>

      {showComparison && (
        <div class={classes!.comparisonGrid}>
          <div>
            <div class={classes!.codeBlock}>
              <div class={classes!.codeTitle}>‚ùå Traditional CSS-in-JS</div>
{`const styles = {
  button: {
    backgroundColor: '#007bff',
    color: 'white',
    padding: '0.5rem 1rem',
    borderRadius: '4px',
    border: 'none',
    cursor: 'pointer'
  }
};

// Runtime style injection
const Button = () => (
  <button style={styles.button}>
    Click me
  </button>
);`}
            </div>
          </div>

          <div>
            <div class={classes!.codeBlock}>
              <div class={classes!.codeTitle}>‚úÖ ui-lib CSS-Only Format</div>
{`defineComponent("my-button", {
  styles: {
    // Pure CSS - class names auto-generated!
    button: \`{
      background: #007bff;
      color: white;
      padding: 0.5rem 1rem;
      border-radius: 4px;
      border: none;
      cursor: pointer;
    }\`
  },
  render: (props, api, classes) => (
    <button class={classes.button}>
      Click me
    </button>
  )
});`}
            </div>
          </div>
        </div>
      )}

      <div class={classes!.liveDemo}>
        <h3 class={classes!.liveDemoTitle}>Live CSS-Only Format Demo</h3>
        <css-format-live-demo />
      </div>

      {showProcess && (
        <>
          <h3 style="text-align: center; margin: var(--size-6) 0 var(--size-4) 0; color: var(--purple-7);">
            üîÑ How CSS-Only Format Works
          </h3>
          <div class={classes!.processFlow}>
            <div class={classes!.processStep}>
              <div class={classes!.processNumber}>1</div>
              <div class={classes!.processTitle}>Write CSS Properties</div>
              <div class={classes!.processDescription}>
                Write pure CSS in object notation within the styles configuration
              </div>
            </div>

            <div class={classes!.processStep}>
              <div class={classes!.processNumber}>2</div>
              <div class={classes!.processTitle}>Auto-Generate Classes</div>
              <div class={classes!.processDescription}>
                ui-lib generates scoped class names and injects styles at build time
              </div>
            </div>

            <div class={classes!.processStep}>
              <div class={classes!.processNumber}>3</div>
              <div class={classes!.processTitle}>Provide Class Map</div>
              <div class={classes!.processDescription}>
                The classes object is passed to your render function with generated names
              </div>
            </div>

            <div class={classes!.processStep}>
              <div class={classes!.processNumber}>4</div>
              <div class={classes!.processTitle}>Zero Runtime Cost</div>
              <div class={classes!.processDescription}>
                No client-side style processing. Styles are pre-generated and optimized
              </div>
            </div>
          </div>
        </>
      )}

      <div class={classes!.benefitsList}>
        <div class={classes!.benefitCard}>
          <div class={classes!.benefitIcon}>‚ö°</div>
          <div class={classes!.benefitTitle}>Zero Runtime Overhead</div>
          <div class={classes!.benefitDescription}>
            Styles are processed at build time. No CSS-in-JS runtime library needed on the client.
          </div>
        </div>

        <div class={classes!.benefitCard}>
          <div class={classes!.benefitIcon}>üîí</div>
          <div class={classes!.benefitTitle}>Automatic Scoping</div>
          <div class={classes!.benefitDescription}>
            Generated class names prevent style conflicts. Each component gets its own scoped CSS.
          </div>
        </div>

        <div class={classes!.benefitCard}>
          <div class={classes!.benefitIcon}>üìù</div>
          <div class={classes!.benefitTitle}>Pure CSS Syntax</div>
          <div class={classes!.benefitDescription}>
            Write familiar CSS properties. No learning curve or abstraction layer needed.
          </div>
        </div>

        <div class={classes!.benefitCard}>
          <div class={classes!.benefitIcon}>üéØ</div>
          <div class={classes!.benefitTitle}>TypeScript Integration</div>
          <div class={classes!.benefitDescription}>
            Full TypeScript support with autocomplete for your style keys and CSS properties.
          </div>
        </div>

        <div class={classes!.benefitCard}>
          <div class={classes!.benefitIcon}>üöÄ</div>
          <div class={classes!.benefitTitle}>Bundle Optimization</div>
          <div class={classes!.benefitDescription}>
            Automatic deduplication and minification of CSS. Only used styles are included.
          </div>
        </div>

        <div class={classes!.benefitCard}>
          <div class={classes!.benefitIcon}>üé®</div>
          <div class={classes!.benefitTitle}>Design Token Support</div>
          <div class={classes!.benefitDescription">
            Seamless integration with CSS custom properties and design systems like Open Props.
          </div>
        </div>
      </div>
    </div>
    );
  },
});

/**
 * üé® Live CSS Format Demo Component
 * Interactive demonstration of the CSS-only format system
 */
defineComponent("css-format-live-demo", {
  // ‚ú® CSS-Only Format in action!
  styles: {
    demoCard: `{
      background: linear-gradient(135deg, var(--blue-1) 0%, var(--purple-1) 100%);
      border: 2px solid var(--blue-5);
      border-radius: var(--radius-4);
      padding: var(--size-5);
      margin: var(--size-3) 0;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      transition: all 0.3s ease;
    }`,

    demoTitle: `{
      font-size: var(--font-size-3);
      font-weight: var(--font-weight-6);
      color: var(--blue-8);
      margin-bottom: var(--size-3);
      text-align: center;
    }`,

    buttonGroup: `{
      display: flex;
      gap: var(--size-3);
      justify-content: center;
      flex-wrap: wrap;
      margin: var(--size-4) 0;
    }`,

    primaryButton: `{
      background: linear-gradient(135deg, var(--blue-6) 0%, var(--blue-7) 100%);
      color: white;
      border: none;
      padding: var(--size-3) var(--size-4);
      border-radius: var(--radius-3);
      font-weight: var(--font-weight-6);
      cursor: pointer;
      transition: all 0.3s ease;
      box-shadow: 0 2px 8px rgba(0, 0, 0, 0.15);
      transform: translateY(0);
    }`,

    primaryButtonHover: `{
      transform: translateY(-2px);
      box-shadow: 0 4px 16px rgba(0, 0, 0, 0.2);
      filter: brightness(1.1);
    }`,

    secondaryButton: `{
      background: transparent;
      color: var(--purple-7);
      border: 2px solid var(--purple-5);
      padding: var(--size-3) var(--size-4);
      border-radius: var(--radius-3);
      font-weight: var(--font-weight-6);
      cursor: pointer;
      transition: all 0.3s ease;
    }`,

    secondaryButtonHover: `{
      background: var(--purple-6);
      color: white;
      border-color: var(--purple-6);
    }`,

    codeDisplay: `{
      background: var(--gray-9);
      color: var(--gray-1);
      padding: var(--size-4);
      border-radius: var(--radius-3);
      font-family: var(--font-mono);
      font-size: var(--font-size-0);
      line-height: 1.5;
      margin-top: var(--size-4);
      border: 1px solid var(--gray-7);
    }`,

    generatedClasses: `{
      background: var(--green-1);
      border: 1px solid var(--green-4);
      border-radius: var(--radius-3);
      padding: var(--size-3);
      margin-top: var(--size-3);
      font-family: var(--font-mono);
      font-size: var(--font-size-0);
    }`,

    classTitle: `{
      font-weight: var(--font-weight-6);
      color: var(--green-7);
      margin-bottom: var(--size-2);
    }`,

    className: `{
      color: var(--green-8);
      background: white;
      padding: var(--size-1) var(--size-2);
      border-radius: var(--radius-1);
      margin: var(--size-1);
      display: inline-block;
      border: 1px solid var(--green-3);
    }`,

    statsGrid: `{
      display: grid;
      grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
      gap: var(--size-3);
      margin-top: var(--size-4);
    }`,

    statCard: `{
      background: white;
      border: 1px solid var(--gray-3);
      border-radius: var(--radius-2);
      padding: var(--size-3);
      text-align: center;
    }`,

    statValue: `{
      font-size: var(--font-size-2);
      font-weight: var(--font-weight-7);
      color: var(--indigo-6);
      margin-bottom: var(--size-1);
    }`,

    statLabel: `{
      font-size: var(--font-size-0);
      color: var(--gray-6);
      text-transform: uppercase;
      letter-spacing: 0.5px;
    }`,
  },

  render: (
    {
      showCode = boolean(true),
    },
    _api,
    classes,
  ) => (
    <div class={classes!.demoCard}>
      <h4 class={classes!.demoTitle}>üé® Live CSS-Only Format Component</h4>
      
      <div class={classes!.buttonGroup}>
        <button 
          class={classes!.primaryButton}
          onmouseover={`this.style.transform = 'translateY(-2px)'; this.style.boxShadow = '0 4px 16px rgba(0,0,0,0.2)'; this.style.filter = 'brightness(1.1)';`}
          onmouseout={`this.style.transform = 'translateY(0)'; this.style.boxShadow = '0 2px 8px rgba(0,0,0,0.15)'; this.style.filter = 'brightness(1)';`}
        >
          Primary Button
        </button>
        
        <button 
          class={classes!.secondaryButton}
          onmouseover={`this.style.background = 'var(--purple-6)'; this.style.color = 'white'; this.style.borderColor = 'var(--purple-6)';`}
          onmouseout={`this.style.background = 'transparent'; this.style.color = 'var(--purple-7)'; this.style.borderColor = 'var(--purple-5)';`}
        >
          Secondary Button
        </button>
      </div>

      {showCode && (
        <>
          <div class={classes!.codeDisplay}>
{`// ‚ú® CSS-Only Format Definition
styles: {
  primaryButton: \`{
    background: linear-gradient(135deg, var(--blue-6) 0%, var(--blue-7) 100%);
    color: white;
    border: none;
    padding: var(--size-3) var(--size-4);
    border-radius: var(--radius-3);
    /* ... more CSS properties */
  }\`,
  
  secondaryButton: \`{
    background: transparent;
    color: var(--purple-7);
    border: 2px solid var(--purple-5);
    /* ... more CSS properties */
  }\`
}`}
          </div>

          <div class={classes!.generatedClasses}>
            <div class={classes!.classTitle}>Generated Class Names:</div>
            <span class={classes!.className}>.demoCard</span>
            <span class={classes!.className}>.primaryButton</span>
            <span class={classes!.className}>.secondaryButton</span>
            <span class={classes!.className}>.buttonGroup</span>
            <span class={classes!.className}>.codeDisplay</span>
          </div>
        </>
      )}

      <div class={classes!.statsGrid}>
        <div class={classes!.statCard}>
          <div class={classes!.statValue}>0ms</div>
          <div class={classes!.statLabel}>Runtime</div>
        </div>
        <div class={classes!.statCard}>
          <div class={classes!.statValue}>12</div>
          <div class={classes!.statLabel}>CSS Rules</div>
        </div>
        <div class={classes!.statCard}>
          <div class={classes!.statValue}>Auto</div>
          <div class={classes!.statLabel}>Scoped</div>
        </div>
        <div class={classes!.statCard}>
          <div class={classes!.statValue}>100%</div>
          <div class={classes!.statLabel}>Pure CSS</div>
        </div>
      </div>
    </div>
  ),
});

/**
 * üîÑ Style Processing Visualizer
 * Shows the transformation from CSS properties to class names
 */
defineComponent("style-processing-visualizer", {
  styles: {
    visualizer: `{
      background: white;
      border: 2px solid var(--indigo-3);
      border-radius: var(--radius-4);
      padding: var(--size-5);
      margin: var(--size-4) 0;
    }`,

    visualizerTitle: `{
      font-size: var(--font-size-3);
      font-weight: var(--font-weight-6);
      color: var(--indigo-7);
      margin-bottom: var(--size-4);
      text-align: center;
    }`,

    transformationSteps: `{
      display: grid;
      grid-template-columns: 1fr auto 1fr auto 1fr;
      gap: var(--size-3);
      align-items: center;
      margin: var(--size-4) 0;
    }`,

    step: `{
      background: var(--gray-1);
      border: 1px solid var(--gray-3);
      border-radius: var(--radius-3);
      padding: var(--size-3);
      font-family: var(--font-mono);
      font-size: var(--font-size-0);
    }`,

    stepTitle: `{
      font-weight: var(--font-weight-6);
      color: var(--indigo-6);
      margin-bottom: var(--size-2);
      text-align: center;
    }`,

    arrow: `{
      font-size: var(--font-size-3);
      color: var(--indigo-5);
      text-align: center;
    }`,

    output: `{
      background: var(--green-1);
      border: 1px solid var(--green-4);
    }`,
  },

  render: () => (
    <div class="visualizer">
      <h4 class="visualizerTitle">üîÑ CSS-Only Format Processing Pipeline</h4>
      
      <div class="transformationSteps">
        <div class="step">
          <div class="stepTitle">1. Input CSS</div>
{`styles: {
  button: \`{
    background: blue;
    padding: 1rem;
    border-radius: 4px;
  }\`
}`}
        </div>

        <div class="arrow">‚Üí</div>

        <div class="step">
          <div class="stepTitle">2. Parse & Scope</div>
{`.button-abc123 {
  background: blue;
  padding: 1rem;
  border-radius: 4px;
}`}
        </div>

        <div class="arrow">‚Üí</div>

        <div class="step output">
          <div class="stepTitle">3. Class Map</div>
{`classes = {
  button: "button-abc123"
}

// Usage:
class={classes.button}`}
        </div>
      </div>
    </div>
  ),
});